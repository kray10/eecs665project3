// vardecl tests
int _df;bool x1;void x;struct x y;

// fnDecl tests
int x(){}bool x(int a, bool b, void c){}
void test (int a){int x;}void test (int a){x = 1;}void test (int a){int x;x = 1;}
void test (int a){int x;bool y;y = x + 5;x = 1;}

// structDecl tests
struct x {int y;};struct x{struct x y; bool z;};

// stmt tests
void testFunc() {
  // assign
  x = 1; x.r = y.t;r.t.y.u.i.o.p = 4;

  // PlusPlus tests
  x++;c.t++;r.t.y++;

  // MinusMinus tests
  x--;c.t--;r.t.y--;

  // read tests
  cin >> r;cin >> t.r;cin >> a.s.d.f.g.h.j.k;

  // write tests
  cout << r; cout << r.t; cout << a.s.d.f.g.h.j.k.l;

  // if test
  if (a) {}if(a){int x;}if(a){x = 1;}if(a){int x;y=4;}
  if (a){if(b){if(c){y=7;}}}

  // if else tests
  if (a) {}else{}if(a){int x;}else{int x;}if(a){x = 1;}else{x =1;}
  if(a){int x;y=4;}else{int x;y=4;}
  if (a){if(b){if(c){y=7;}else{y=r;}}else{s=r;}}else{t=y;}

  // while tests
  while(a) {}while(a){int x;}while(a){x =y;}while(a){int x; x =y;}
  while(a){while(b){while(c){a = b+c;}}}

  //return tests
  return a; return a+b; return true; return false;return d> k; return;

  // fncall tests
  t();t(a);t(a,b,c,d,e,f,g);

  # exp tests

    // associative
    y=1+2-3*4/!5&&6||-7;

    // non-associative
    y = (1==(2<(3>(4<=(5>=(6!=(7)))))));

    // mixed associations
    y = 1+2-3*4/!5&&6||7==(2<(3>(4<=(5>=(6!=(7))))));
    y = 1+(3!=6)/7;

    // assignment
    x=b=c=d=6;r.y.t.r=e.r.t.y=h.f.sd.s=da_s1df.as1d_fas1df.as1d_f1a=true;

  // deep nesting of multiple types
  if (a == b || c != d && e < f) {
  while(a) {
  if (b){while(c){if(c){while(d){int x; x = 1; r(a,b,c,d);}}}} else {while(d){
  if (r) {while(h){int y;y=5+4;f(f,g,h,j,k);}}
  }}
  }
  }
}

