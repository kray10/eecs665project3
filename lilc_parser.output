Terminals unused in grammar

   "newline"
   CHAR
   MINUS
   TIMES
   DIVIDE
   NOT
   AND
   OR
   EQUALS
   NOTEQUALS
   LESS
   GREATER
   LESSEQ
   GREATEREQ
   ASSIGNDeclNode


Grammar

    0 $accept: program "end of file"

    1 program: declList

    2 declList: declList decl
    3         | %empty

    4 decl: varDecl
    5     | fnDecl
    6     | structDecl

    7 varDeclList: varDeclList varDecl
    8            | %empty

    9 varDecl: type id SEMICOLON
   10        | STRUCT id id SEMICOLON

   11 fnDecl: type id formals fnBody

   12 structDecl: STRUCT id LCURLY structBody RCURLY SEMICOLON

   13 structBody: structBody varDecl
   14           | varDecl

   15 formals: LPAREN RPAREN
   16        | LPAREN formalsList RPAREN

   17 formalsList: formalDecl
   18            | formalDecl COMMA formalsList

   19 formalDecl: type id

   20 fnBody: LCURLY varDeclList stmtList RCURLY

   21 stmtList: stmtList stmt
   22         | %empty

   23 stmt: assignExp SEMICOLON
   24     | loc PLUSPLUS SEMICOLON
   25     | loc MINUSMINUS SEMICOLON
   26     | INPUT READ loc SEMICOLON
   27     | OUTPUT WRITE exp SEMICOLON
   28     | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
   29     | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
   30     | WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
   31     | RETURN exp SEMICOLON
   32     | RETURN SEMICOLON
   33     | fncall SEMICOLON

   34 assignExp: loc ASSIGN exp

   35 exp: exp PLUS exp
   36    | term

   37 term: loc
   38     | INTLITERAL
   39     | STRINGLITERAL
   40     | TRUE
   41     | FALSE

   42 fncall: id LPAREN RPAREN
   43       | id LPAREN actualList RPAREN

   44 actualList: exp
   45           | actualList COMMA exp

   46 type: INT
   47     | BOOL
   48     | VOID

   49 loc: id
   50    | loc DOT id

   51 id: ID


Terminals, with rules where they appear

"end of file" (0) 0
error (256)
"newline" (258)
CHAR (259)
BOOL (260) 47
INT (261) 46
VOID (262) 48
TRUE (263) 40
FALSE (264) 41
STRUCT (265) 10 12
INPUT (266) 26
OUTPUT (267) 27
IF (268) 28 29
ELSE (269) 29
WHILE (270) 30
RETURN (271) 31 32
ID (272) 51
INTLITERAL (273) 38
STRINGLITERAL (274) 39
LCURLY (275) 12 20 28 29 30
RCURLY (276) 12 20 28 29 30
LPAREN (277) 15 16 28 29 30 42 43
RPAREN (278) 15 16 28 29 30 42 43
SEMICOLON (279) 9 10 12 23 24 25 26 27 31 32 33
COMMA (280) 18 45
DOT (281) 50
WRITE (282) 27
READ (283) 26
PLUSPLUS (284) 24
MINUSMINUS (285) 25
PLUS (286) 35
MINUS (287)
TIMES (288)
DIVIDE (289)
NOT (290)
AND (291)
OR (292)
EQUALS (293)
NOTEQUALS (294)
LESS (295)
GREATER (296)
LESSEQ (297)
GREATEREQ (298)
ASSIGNDeclNode (299)
ASSIGN (300) 34


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
declList (48)
    on left: 2 3, on right: 1 2
decl (49)
    on left: 4 5 6, on right: 2
varDeclList (50)
    on left: 7 8, on right: 7 20 28 29 30
varDecl (51)
    on left: 9 10, on right: 4 7 13 14
fnDecl (52)
    on left: 11, on right: 5
structDecl (53)
    on left: 12, on right: 6
structBody (54)
    on left: 13 14, on right: 12 13
formals (55)
    on left: 15 16, on right: 11
formalsList (56)
    on left: 17 18, on right: 16 18
formalDecl (57)
    on left: 19, on right: 17 18
fnBody (58)
    on left: 20, on right: 11
stmtList (59)
    on left: 21 22, on right: 20 21 28 29 30
stmt (60)
    on left: 23 24 25 26 27 28 29 30 31 32 33, on right: 21
assignExp (61)
    on left: 34, on right: 23
exp (62)
    on left: 35 36, on right: 27 28 29 30 31 34 35 44 45
term (63)
    on left: 37 38 39 40 41, on right: 36
fncall (64)
    on left: 42 43, on right: 33
actualList (65)
    on left: 44 45, on right: 43 45
type (66)
    on left: 46 47 48, on right: 9 11 19
loc (67)
    on left: 49 50, on right: 24 25 26 34 37 50
id (68)
    on left: 51, on right: 9 10 11 12 19 42 43 49 50


State 0

    0 $accept: . program "end of file"

    $default  reduce using rule 3 (declList)

    program   go to state 1
    declList  go to state 2


State 1

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 program: declList .
    2 declList: declList . decl

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 1 (program)

    decl        go to state 8
    varDecl     go to state 9
    fnDecl      go to state 10
    structDecl  go to state 11
    type        go to state 12


State 3

    0 $accept: program "end of file" .

    $default  accept


State 4

   47 type: BOOL .

    $default  reduce using rule 47 (type)


State 5

   46 type: INT .

    $default  reduce using rule 46 (type)


State 6

   48 type: VOID .

    $default  reduce using rule 48 (type)


State 7

   10 varDecl: STRUCT . id id SEMICOLON
   12 structDecl: STRUCT . id LCURLY structBody RCURLY SEMICOLON

    ID  shift, and go to state 13

    id  go to state 14


State 8

    2 declList: declList decl .

    $default  reduce using rule 2 (declList)


State 9

    4 decl: varDecl .

    $default  reduce using rule 4 (decl)


State 10

    5 decl: fnDecl .

    $default  reduce using rule 5 (decl)


State 11

    6 decl: structDecl .

    $default  reduce using rule 6 (decl)


State 12

    9 varDecl: type . id SEMICOLON
   11 fnDecl: type . id formals fnBody

    ID  shift, and go to state 13

    id  go to state 15


State 13

   51 id: ID .

    $default  reduce using rule 51 (id)


State 14

   10 varDecl: STRUCT id . id SEMICOLON
   12 structDecl: STRUCT id . LCURLY structBody RCURLY SEMICOLON

    ID      shift, and go to state 13
    LCURLY  shift, and go to state 16

    id  go to state 17


State 15

    9 varDecl: type id . SEMICOLON
   11 fnDecl: type id . formals fnBody

    LPAREN     shift, and go to state 18
    SEMICOLON  shift, and go to state 19

    formals  go to state 20


State 16

   12 structDecl: STRUCT id LCURLY . structBody RCURLY SEMICOLON

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 21

    varDecl     go to state 22
    structBody  go to state 23
    type        go to state 24


State 17

   10 varDecl: STRUCT id id . SEMICOLON

    SEMICOLON  shift, and go to state 25


State 18

   15 formals: LPAREN . RPAREN
   16        | LPAREN . formalsList RPAREN

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    RPAREN  shift, and go to state 26

    formalsList  go to state 27
    formalDecl   go to state 28
    type         go to state 29


State 19

    9 varDecl: type id SEMICOLON .

    $default  reduce using rule 9 (varDecl)


State 20

   11 fnDecl: type id formals . fnBody

    LCURLY  shift, and go to state 30

    fnBody  go to state 31


State 21

   10 varDecl: STRUCT . id id SEMICOLON

    ID  shift, and go to state 13

    id  go to state 32


State 22

   14 structBody: varDecl .

    $default  reduce using rule 14 (structBody)


State 23

   12 structDecl: STRUCT id LCURLY structBody . RCURLY SEMICOLON
   13 structBody: structBody . varDecl

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 21
    RCURLY  shift, and go to state 33

    varDecl  go to state 34
    type     go to state 24


State 24

    9 varDecl: type . id SEMICOLON

    ID  shift, and go to state 13

    id  go to state 35


State 25

   10 varDecl: STRUCT id id SEMICOLON .

    $default  reduce using rule 10 (varDecl)


State 26

   15 formals: LPAREN RPAREN .

    $default  reduce using rule 15 (formals)


State 27

   16 formals: LPAREN formalsList . RPAREN

    RPAREN  shift, and go to state 36


State 28

   17 formalsList: formalDecl .
   18            | formalDecl . COMMA formalsList

    COMMA  shift, and go to state 37

    $default  reduce using rule 17 (formalsList)


State 29

   19 formalDecl: type . id

    ID  shift, and go to state 13

    id  go to state 38


State 30

   20 fnBody: LCURLY . varDeclList stmtList RCURLY

    $default  reduce using rule 8 (varDeclList)

    varDeclList  go to state 39


State 31

   11 fnDecl: type id formals fnBody .

    $default  reduce using rule 11 (fnDecl)


State 32

   10 varDecl: STRUCT id . id SEMICOLON

    ID  shift, and go to state 13

    id  go to state 17


State 33

   12 structDecl: STRUCT id LCURLY structBody RCURLY . SEMICOLON

    SEMICOLON  shift, and go to state 40


State 34

   13 structBody: structBody varDecl .

    $default  reduce using rule 13 (structBody)


State 35

    9 varDecl: type id . SEMICOLON

    SEMICOLON  shift, and go to state 19


State 36

   16 formals: LPAREN formalsList RPAREN .

    $default  reduce using rule 16 (formals)


State 37

   18 formalsList: formalDecl COMMA . formalsList

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    formalsList  go to state 41
    formalDecl   go to state 28
    type         go to state 29


State 38

   19 formalDecl: type id .

    $default  reduce using rule 19 (formalDecl)


State 39

    7 varDeclList: varDeclList . varDecl
   20 fnBody: LCURLY varDeclList . stmtList RCURLY

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 21

    $default  reduce using rule 22 (stmtList)

    varDecl   go to state 42
    stmtList  go to state 43
    type      go to state 24


State 40

   12 structDecl: STRUCT id LCURLY structBody RCURLY SEMICOLON .

    $default  reduce using rule 12 (structDecl)


State 41

   18 formalsList: formalDecl COMMA formalsList .

    $default  reduce using rule 18 (formalsList)


State 42

    7 varDeclList: varDeclList varDecl .

    $default  reduce using rule 7 (varDeclList)


State 43

   20 fnBody: LCURLY varDeclList stmtList . RCURLY
   21 stmtList: stmtList . stmt

    INPUT   shift, and go to state 44
    OUTPUT  shift, and go to state 45
    IF      shift, and go to state 46
    WHILE   shift, and go to state 47
    RETURN  shift, and go to state 48
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 49

    stmt       go to state 50
    assignExp  go to state 51
    fncall     go to state 52
    loc        go to state 53
    id         go to state 54


State 44

   26 stmt: INPUT . READ loc SEMICOLON

    READ  shift, and go to state 55


State 45

   27 stmt: OUTPUT . WRITE exp SEMICOLON

    WRITE  shift, and go to state 56


State 46

   28 stmt: IF . LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
   29     | IF . LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    LPAREN  shift, and go to state 57


State 47

   30 stmt: WHILE . LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY

    LPAREN  shift, and go to state 58


State 48

   31 stmt: RETURN . exp SEMICOLON
   32     | RETURN . SEMICOLON

    TRUE           shift, and go to state 59
    FALSE          shift, and go to state 60
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 61
    STRINGLITERAL  shift, and go to state 62
    SEMICOLON      shift, and go to state 63

    exp   go to state 64
    term  go to state 65
    loc   go to state 66
    id    go to state 67


State 49

   20 fnBody: LCURLY varDeclList stmtList RCURLY .

    $default  reduce using rule 20 (fnBody)


State 50

   21 stmtList: stmtList stmt .

    $default  reduce using rule 21 (stmtList)


State 51

   23 stmt: assignExp . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 52

   33 stmt: fncall . SEMICOLON

    SEMICOLON  shift, and go to state 69


State 53

   24 stmt: loc . PLUSPLUS SEMICOLON
   25     | loc . MINUSMINUS SEMICOLON
   34 assignExp: loc . ASSIGN exp
   50 loc: loc . DOT id

    DOT         shift, and go to state 70
    PLUSPLUS    shift, and go to state 71
    MINUSMINUS  shift, and go to state 72
    ASSIGN      shift, and go to state 73


State 54

   42 fncall: id . LPAREN RPAREN
   43       | id . LPAREN actualList RPAREN
   49 loc: id .

    LPAREN  shift, and go to state 74

    $default  reduce using rule 49 (loc)


State 55

   26 stmt: INPUT READ . loc SEMICOLON

    ID  shift, and go to state 13

    loc  go to state 75
    id   go to state 67


State 56

   27 stmt: OUTPUT WRITE . exp SEMICOLON

    TRUE           shift, and go to state 59
    FALSE          shift, and go to state 60
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 61
    STRINGLITERAL  shift, and go to state 62

    exp   go to state 76
    term  go to state 65
    loc   go to state 66
    id    go to state 67


State 57

   28 stmt: IF LPAREN . exp RPAREN LCURLY varDeclList stmtList RCURLY
   29     | IF LPAREN . exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    TRUE           shift, and go to state 59
    FALSE          shift, and go to state 60
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 61
    STRINGLITERAL  shift, and go to state 62

    exp   go to state 77
    term  go to state 65
    loc   go to state 66
    id    go to state 67


State 58

   30 stmt: WHILE LPAREN . exp RPAREN LCURLY varDeclList stmtList RCURLY

    TRUE           shift, and go to state 59
    FALSE          shift, and go to state 60
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 61
    STRINGLITERAL  shift, and go to state 62

    exp   go to state 78
    term  go to state 65
    loc   go to state 66
    id    go to state 67


State 59

   40 term: TRUE .

    $default  reduce using rule 40 (term)


State 60

   41 term: FALSE .

    $default  reduce using rule 41 (term)


State 61

   38 term: INTLITERAL .

    $default  reduce using rule 38 (term)


State 62

   39 term: STRINGLITERAL .

    $default  reduce using rule 39 (term)


State 63

   32 stmt: RETURN SEMICOLON .

    $default  reduce using rule 32 (stmt)


State 64

   31 stmt: RETURN exp . SEMICOLON
   35 exp: exp . PLUS exp

    SEMICOLON  shift, and go to state 79
    PLUS       shift, and go to state 80


State 65

   36 exp: term .

    $default  reduce using rule 36 (exp)


State 66

   37 term: loc .
   50 loc: loc . DOT id

    DOT  shift, and go to state 70

    $default  reduce using rule 37 (term)


State 67

   49 loc: id .

    $default  reduce using rule 49 (loc)


State 68

   23 stmt: assignExp SEMICOLON .

    $default  reduce using rule 23 (stmt)


State 69

   33 stmt: fncall SEMICOLON .

    $default  reduce using rule 33 (stmt)


State 70

   50 loc: loc DOT . id

    ID  shift, and go to state 13

    id  go to state 81


State 71

   24 stmt: loc PLUSPLUS . SEMICOLON

    SEMICOLON  shift, and go to state 82


State 72

   25 stmt: loc MINUSMINUS . SEMICOLON

    SEMICOLON  shift, and go to state 83


State 73

   34 assignExp: loc ASSIGN . exp

    TRUE           shift, and go to state 59
    FALSE          shift, and go to state 60
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 61
    STRINGLITERAL  shift, and go to state 62

    exp   go to state 84
    term  go to state 65
    loc   go to state 66
    id    go to state 67


State 74

   42 fncall: id LPAREN . RPAREN
   43       | id LPAREN . actualList RPAREN

    TRUE           shift, and go to state 59
    FALSE          shift, and go to state 60
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 61
    STRINGLITERAL  shift, and go to state 62
    RPAREN         shift, and go to state 85

    exp         go to state 86
    term        go to state 65
    actualList  go to state 87
    loc         go to state 66
    id          go to state 67


State 75

   26 stmt: INPUT READ loc . SEMICOLON
   50 loc: loc . DOT id

    SEMICOLON  shift, and go to state 88
    DOT        shift, and go to state 70


State 76

   27 stmt: OUTPUT WRITE exp . SEMICOLON
   35 exp: exp . PLUS exp

    SEMICOLON  shift, and go to state 89
    PLUS       shift, and go to state 80


State 77

   28 stmt: IF LPAREN exp . RPAREN LCURLY varDeclList stmtList RCURLY
   29     | IF LPAREN exp . RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
   35 exp: exp . PLUS exp

    RPAREN  shift, and go to state 90
    PLUS    shift, and go to state 80


State 78

   30 stmt: WHILE LPAREN exp . RPAREN LCURLY varDeclList stmtList RCURLY
   35 exp: exp . PLUS exp

    RPAREN  shift, and go to state 91
    PLUS    shift, and go to state 80


State 79

   31 stmt: RETURN exp SEMICOLON .

    $default  reduce using rule 31 (stmt)


State 80

   35 exp: exp PLUS . exp

    TRUE           shift, and go to state 59
    FALSE          shift, and go to state 60
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 61
    STRINGLITERAL  shift, and go to state 62

    exp   go to state 92
    term  go to state 65
    loc   go to state 66
    id    go to state 67


State 81

   50 loc: loc DOT id .

    $default  reduce using rule 50 (loc)


State 82

   24 stmt: loc PLUSPLUS SEMICOLON .

    $default  reduce using rule 24 (stmt)


State 83

   25 stmt: loc MINUSMINUS SEMICOLON .

    $default  reduce using rule 25 (stmt)


State 84

   34 assignExp: loc ASSIGN exp .
   35 exp: exp . PLUS exp

    PLUS  shift, and go to state 80

    $default  reduce using rule 34 (assignExp)


State 85

   42 fncall: id LPAREN RPAREN .

    $default  reduce using rule 42 (fncall)


State 86

   35 exp: exp . PLUS exp
   44 actualList: exp .

    PLUS  shift, and go to state 80

    $default  reduce using rule 44 (actualList)


State 87

   43 fncall: id LPAREN actualList . RPAREN
   45 actualList: actualList . COMMA exp

    RPAREN  shift, and go to state 93
    COMMA   shift, and go to state 94


State 88

   26 stmt: INPUT READ loc SEMICOLON .

    $default  reduce using rule 26 (stmt)


State 89

   27 stmt: OUTPUT WRITE exp SEMICOLON .

    $default  reduce using rule 27 (stmt)


State 90

   28 stmt: IF LPAREN exp RPAREN . LCURLY varDeclList stmtList RCURLY
   29     | IF LPAREN exp RPAREN . LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    LCURLY  shift, and go to state 95


State 91

   30 stmt: WHILE LPAREN exp RPAREN . LCURLY varDeclList stmtList RCURLY

    LCURLY  shift, and go to state 96


State 92

   35 exp: exp . PLUS exp
   35    | exp PLUS exp .

    $default  reduce using rule 35 (exp)


State 93

   43 fncall: id LPAREN actualList RPAREN .

    $default  reduce using rule 43 (fncall)


State 94

   45 actualList: actualList COMMA . exp

    TRUE           shift, and go to state 59
    FALSE          shift, and go to state 60
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 61
    STRINGLITERAL  shift, and go to state 62

    exp   go to state 97
    term  go to state 65
    loc   go to state 66
    id    go to state 67


State 95

   28 stmt: IF LPAREN exp RPAREN LCURLY . varDeclList stmtList RCURLY
   29     | IF LPAREN exp RPAREN LCURLY . varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    $default  reduce using rule 8 (varDeclList)

    varDeclList  go to state 98


State 96

   30 stmt: WHILE LPAREN exp RPAREN LCURLY . varDeclList stmtList RCURLY

    $default  reduce using rule 8 (varDeclList)

    varDeclList  go to state 99


State 97

   35 exp: exp . PLUS exp
   45 actualList: actualList COMMA exp .

    PLUS  shift, and go to state 80

    $default  reduce using rule 45 (actualList)


State 98

    7 varDeclList: varDeclList . varDecl
   28 stmt: IF LPAREN exp RPAREN LCURLY varDeclList . stmtList RCURLY
   29     | IF LPAREN exp RPAREN LCURLY varDeclList . stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 21

    $default  reduce using rule 22 (stmtList)

    varDecl   go to state 42
    stmtList  go to state 100
    type      go to state 24


State 99

    7 varDeclList: varDeclList . varDecl
   30 stmt: WHILE LPAREN exp RPAREN LCURLY varDeclList . stmtList RCURLY

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 21

    $default  reduce using rule 22 (stmtList)

    varDecl   go to state 42
    stmtList  go to state 101
    type      go to state 24


State 100

   21 stmtList: stmtList . stmt
   28 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList . RCURLY
   29     | IF LPAREN exp RPAREN LCURLY varDeclList stmtList . RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    INPUT   shift, and go to state 44
    OUTPUT  shift, and go to state 45
    IF      shift, and go to state 46
    WHILE   shift, and go to state 47
    RETURN  shift, and go to state 48
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 102

    stmt       go to state 50
    assignExp  go to state 51
    fncall     go to state 52
    loc        go to state 53
    id         go to state 54


State 101

   21 stmtList: stmtList . stmt
   30 stmt: WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList . RCURLY

    INPUT   shift, and go to state 44
    OUTPUT  shift, and go to state 45
    IF      shift, and go to state 46
    WHILE   shift, and go to state 47
    RETURN  shift, and go to state 48
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 103

    stmt       go to state 50
    assignExp  go to state 51
    fncall     go to state 52
    loc        go to state 53
    id         go to state 54


State 102

   28 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY .
   29     | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY . ELSE LCURLY varDeclList stmtList RCURLY

    ELSE  shift, and go to state 104

    $default  reduce using rule 28 (stmt)


State 103

   30 stmt: WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY .

    $default  reduce using rule 30 (stmt)


State 104

   29 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE . LCURLY varDeclList stmtList RCURLY

    LCURLY  shift, and go to state 105


State 105

   29 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY . varDeclList stmtList RCURLY

    $default  reduce using rule 8 (varDeclList)

    varDeclList  go to state 106


State 106

    7 varDeclList: varDeclList . varDecl
   29 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList . stmtList RCURLY

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 21

    $default  reduce using rule 22 (stmtList)

    varDecl   go to state 42
    stmtList  go to state 107
    type      go to state 24


State 107

   21 stmtList: stmtList . stmt
   29 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList . RCURLY

    INPUT   shift, and go to state 44
    OUTPUT  shift, and go to state 45
    IF      shift, and go to state 46
    WHILE   shift, and go to state 47
    RETURN  shift, and go to state 48
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 108

    stmt       go to state 50
    assignExp  go to state 51
    fncall     go to state 52
    loc        go to state 53
    id         go to state 54


State 108

   29 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY .

    $default  reduce using rule 29 (stmt)
